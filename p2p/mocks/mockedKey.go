// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/libp2p/go-libp2p@v0.32.1/core/crypto/key.go
//

// Package mock_p2p is a generated GoMock package.
package mock_p2p

import (
	reflect "reflect"

	crypto "github.com/libp2p/go-libp2p/core/crypto"
	pb "github.com/libp2p/go-libp2p/core/crypto/pb"
	gomock "go.uber.org/mock/gomock"
)

// MockKey is a mock of Key interface.
type MockKey struct {
	ctrl     *gomock.Controller
	recorder *MockKeyMockRecorder
}

// MockKeyMockRecorder is the mock recorder for MockKey.
type MockKeyMockRecorder struct {
	mock *MockKey
}

// NewMockKey creates a new mock instance.
func NewMockKey(ctrl *gomock.Controller) *MockKey {
	mock := &MockKey{ctrl: ctrl}
	mock.recorder = &MockKeyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKey) EXPECT() *MockKeyMockRecorder {
	return m.recorder
}

// Equals mocks base method.
func (m *MockKey) Equals(arg0 crypto.Key) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equals", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equals indicates an expected call of Equals.
func (mr *MockKeyMockRecorder) Equals(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equals", reflect.TypeOf((*MockKey)(nil).Equals), arg0)
}

// Raw mocks base method.
func (m *MockKey) Raw() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Raw")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Raw indicates an expected call of Raw.
func (mr *MockKeyMockRecorder) Raw() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Raw", reflect.TypeOf((*MockKey)(nil).Raw))
}

// Type mocks base method.
func (m *MockKey) Type() pb.KeyType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(pb.KeyType)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockKeyMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockKey)(nil).Type))
}

// MockPrivKey is a mock of PrivKey interface.
type MockPrivKey struct {
	ctrl     *gomock.Controller
	recorder *MockPrivKeyMockRecorder
}

// MockPrivKeyMockRecorder is the mock recorder for MockPrivKey.
type MockPrivKeyMockRecorder struct {
	mock *MockPrivKey
}

// NewMockPrivKey creates a new mock instance.
func NewMockPrivKey(ctrl *gomock.Controller) *MockPrivKey {
	mock := &MockPrivKey{ctrl: ctrl}
	mock.recorder = &MockPrivKeyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPrivKey) EXPECT() *MockPrivKeyMockRecorder {
	return m.recorder
}

// Equals mocks base method.
func (m *MockPrivKey) Equals(arg0 crypto.Key) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equals", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equals indicates an expected call of Equals.
func (mr *MockPrivKeyMockRecorder) Equals(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equals", reflect.TypeOf((*MockPrivKey)(nil).Equals), arg0)
}

// GetPublic mocks base method.
func (m *MockPrivKey) GetPublic() crypto.PubKey {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublic")
	ret0, _ := ret[0].(crypto.PubKey)
	return ret0
}

// GetPublic indicates an expected call of GetPublic.
func (mr *MockPrivKeyMockRecorder) GetPublic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublic", reflect.TypeOf((*MockPrivKey)(nil).GetPublic))
}

// Raw mocks base method.
func (m *MockPrivKey) Raw() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Raw")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Raw indicates an expected call of Raw.
func (mr *MockPrivKeyMockRecorder) Raw() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Raw", reflect.TypeOf((*MockPrivKey)(nil).Raw))
}

// Sign mocks base method.
func (m *MockPrivKey) Sign(arg0 []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sign", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sign indicates an expected call of Sign.
func (mr *MockPrivKeyMockRecorder) Sign(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sign", reflect.TypeOf((*MockPrivKey)(nil).Sign), arg0)
}

// Type mocks base method.
func (m *MockPrivKey) Type() pb.KeyType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(pb.KeyType)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockPrivKeyMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockPrivKey)(nil).Type))
}

// MockPubKey is a mock of PubKey interface.
type MockPubKey struct {
	ctrl     *gomock.Controller
	recorder *MockPubKeyMockRecorder
}

// MockPubKeyMockRecorder is the mock recorder for MockPubKey.
type MockPubKeyMockRecorder struct {
	mock *MockPubKey
}

// NewMockPubKey creates a new mock instance.
func NewMockPubKey(ctrl *gomock.Controller) *MockPubKey {
	mock := &MockPubKey{ctrl: ctrl}
	mock.recorder = &MockPubKeyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPubKey) EXPECT() *MockPubKeyMockRecorder {
	return m.recorder
}

// Equals mocks base method.
func (m *MockPubKey) Equals(arg0 crypto.Key) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equals", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equals indicates an expected call of Equals.
func (mr *MockPubKeyMockRecorder) Equals(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equals", reflect.TypeOf((*MockPubKey)(nil).Equals), arg0)
}

// Raw mocks base method.
func (m *MockPubKey) Raw() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Raw")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Raw indicates an expected call of Raw.
func (mr *MockPubKeyMockRecorder) Raw() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Raw", reflect.TypeOf((*MockPubKey)(nil).Raw))
}

// Type mocks base method.
func (m *MockPubKey) Type() pb.KeyType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(pb.KeyType)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockPubKeyMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockPubKey)(nil).Type))
}

// Verify mocks base method.
func (m *MockPubKey) Verify(data, sig []byte) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", data, sig)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Verify indicates an expected call of Verify.
func (mr *MockPubKeyMockRecorder) Verify(data, sig any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockPubKey)(nil).Verify), data, sig)
}
