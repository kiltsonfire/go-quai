// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/libp2p/go-libp2p@v0.32.1/core/metrics/reporter.go
//

// Package mock_p2p is a generated GoMock package.
package mock_p2p


import (
	reflect "reflect"

	metrics "github.com/libp2p/go-libp2p/core/metrics"
	peer "github.com/libp2p/go-libp2p/core/peer"
	protocol "github.com/libp2p/go-libp2p/core/protocol"
	gomock "go.uber.org/mock/gomock"
)

// MockReporter is a mock of Reporter interface.
type MockReporter struct {
	ctrl     *gomock.Controller
	recorder *MockReporterMockRecorder
}

// MockReporterMockRecorder is the mock recorder for MockReporter.
type MockReporterMockRecorder struct {
	mock *MockReporter
}

// NewMockReporter creates a new mock instance.
func NewMockReporter(ctrl *gomock.Controller) *MockReporter {
	mock := &MockReporter{ctrl: ctrl}
	mock.recorder = &MockReporterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReporter) EXPECT() *MockReporterMockRecorder {
	return m.recorder
}

// GetBandwidthByPeer mocks base method.
func (m *MockReporter) GetBandwidthByPeer() map[peer.ID]metrics.Stats {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBandwidthByPeer")
	ret0, _ := ret[0].(map[peer.ID]metrics.Stats)
	return ret0
}

// GetBandwidthByPeer indicates an expected call of GetBandwidthByPeer.
func (mr *MockReporterMockRecorder) GetBandwidthByPeer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBandwidthByPeer", reflect.TypeOf((*MockReporter)(nil).GetBandwidthByPeer))
}

// GetBandwidthByProtocol mocks base method.
func (m *MockReporter) GetBandwidthByProtocol() map[protocol.ID]metrics.Stats {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBandwidthByProtocol")
	ret0, _ := ret[0].(map[protocol.ID]metrics.Stats)
	return ret0
}

// GetBandwidthByProtocol indicates an expected call of GetBandwidthByProtocol.
func (mr *MockReporterMockRecorder) GetBandwidthByProtocol() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBandwidthByProtocol", reflect.TypeOf((*MockReporter)(nil).GetBandwidthByProtocol))
}

// GetBandwidthForPeer mocks base method.
func (m *MockReporter) GetBandwidthForPeer(arg0 peer.ID) metrics.Stats {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBandwidthForPeer", arg0)
	ret0, _ := ret[0].(metrics.Stats)
	return ret0
}

// GetBandwidthForPeer indicates an expected call of GetBandwidthForPeer.
func (mr *MockReporterMockRecorder) GetBandwidthForPeer(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBandwidthForPeer", reflect.TypeOf((*MockReporter)(nil).GetBandwidthForPeer), arg0)
}

// GetBandwidthForProtocol mocks base method.
func (m *MockReporter) GetBandwidthForProtocol(arg0 protocol.ID) metrics.Stats {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBandwidthForProtocol", arg0)
	ret0, _ := ret[0].(metrics.Stats)
	return ret0
}

// GetBandwidthForProtocol indicates an expected call of GetBandwidthForProtocol.
func (mr *MockReporterMockRecorder) GetBandwidthForProtocol(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBandwidthForProtocol", reflect.TypeOf((*MockReporter)(nil).GetBandwidthForProtocol), arg0)
}

// GetBandwidthTotals mocks base method.
func (m *MockReporter) GetBandwidthTotals() metrics.Stats {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBandwidthTotals")
	ret0, _ := ret[0].(metrics.Stats)
	return ret0
}

// GetBandwidthTotals indicates an expected call of GetBandwidthTotals.
func (mr *MockReporterMockRecorder) GetBandwidthTotals() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBandwidthTotals", reflect.TypeOf((*MockReporter)(nil).GetBandwidthTotals))
}

// LogRecvMessage mocks base method.
func (m *MockReporter) LogRecvMessage(arg0 int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LogRecvMessage", arg0)
}

// LogRecvMessage indicates an expected call of LogRecvMessage.
func (mr *MockReporterMockRecorder) LogRecvMessage(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogRecvMessage", reflect.TypeOf((*MockReporter)(nil).LogRecvMessage), arg0)
}

// LogRecvMessageStream mocks base method.
func (m *MockReporter) LogRecvMessageStream(arg0 int64, arg1 protocol.ID, arg2 peer.ID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LogRecvMessageStream", arg0, arg1, arg2)
}

// LogRecvMessageStream indicates an expected call of LogRecvMessageStream.
func (mr *MockReporterMockRecorder) LogRecvMessageStream(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogRecvMessageStream", reflect.TypeOf((*MockReporter)(nil).LogRecvMessageStream), arg0, arg1, arg2)
}

// LogSentMessage mocks base method.
func (m *MockReporter) LogSentMessage(arg0 int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LogSentMessage", arg0)
}

// LogSentMessage indicates an expected call of LogSentMessage.
func (mr *MockReporterMockRecorder) LogSentMessage(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogSentMessage", reflect.TypeOf((*MockReporter)(nil).LogSentMessage), arg0)
}

// LogSentMessageStream mocks base method.
func (m *MockReporter) LogSentMessageStream(arg0 int64, arg1 protocol.ID, arg2 peer.ID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LogSentMessageStream", arg0, arg1, arg2)
}

// LogSentMessageStream indicates an expected call of LogSentMessageStream.
func (mr *MockReporterMockRecorder) LogSentMessageStream(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogSentMessageStream", reflect.TypeOf((*MockReporter)(nil).LogSentMessageStream), arg0, arg1, arg2)
}
